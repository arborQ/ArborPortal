// <auto-generated />
using System;
using CoreStart.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreStart.Data.Entity
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190614094541_add_recipe_filename")]
    partial class add_recipe_filename
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Account.Membership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("MembershipIdentifier");

                    b.Property<long>("MembershipProviderId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MembershipProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("Membership","Account");
                });

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Account.MembershipProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("MembershipProvider","Account");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Google",
                            Key = "google-oauth2"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Facebook",
                            Key = "facebook"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "GitHub",
                            Key = "github"
                        });
                });

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Account.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 6, 14, 9, 45, 40, 939, DateTimeKind.Utc).AddTicks(9183));

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User","Account");
                });

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Recipes.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 6, 14, 9, 45, 40, 947, DateTimeKind.Utc).AddTicks(1208));

                    b.Property<long>("CreatedByUserId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("MainFileName")
                        .HasMaxLength(36);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Recipe","Recipes");
                });

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Account.Membership", b =>
                {
                    b.HasOne("CoreStart.Data.Entity.Models.Account.MembershipProvider", "MembershipProvider")
                        .WithMany()
                        .HasForeignKey("MembershipProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreStart.Data.Entity.Models.Account.User", "User")
                        .WithMany("Membership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreStart.Data.Entity.Models.Recipes.Recipe", b =>
                {
                    b.HasOne("CoreStart.Data.Entity.Models.Account.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
