@using System.Net.Http
@using System.Text
@using Newtonsoft.Json
@using BlazorStart.Data
@inject AuthorizeService authorizeService

@page "/login"

<form @onsubmit="SubmitForm">
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input 
    type="text" 
    @bind="username" 
    class="form-control" 
    id="exampleInputEmail1" 
    aria-describedby="emailHelp" 
    disabled="@isLoading"
    placeholder="Enter email" />
    <small id="emailHelp" class="form-text text-muted">@username</small>
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" @bind="@password" class="form-control" disabled="@isLoading" id="exampleInputPassword1" placeholder="Password" />
  </div>
  <div class="form-group form-check">
    <input type="checkbox" class="form-check-input" disabled="@isLoading" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary" disabled="@isLoading">Submit</button>
  @if(!string.IsNullOrEmpty(error)) {
    <div class="alert alert-warning" role="alert">
      @error
    </div>
  }
 
</form>

@code {
    string username = "arbor";
    string password = "";
    string error = "";
    bool isLoading = false;

    async Task SubmitForm()
    {
      try {
          error = string.Empty;
          await System.Console.Out.WriteLineAsync("Try submit");
          isLoading = true;
          var result = await authorizeService.AuthorizeUser(username, password);

          await System.Console.Out.WriteLineAsync($"Done {result}");
        } catch(Exception ex) {
          await System.Console.Out.WriteLineAsync(ex.Message);
        } finally {
          isLoading = false;
        }
    }
}